var e = new MobileDetect(window.navigator.userAgent)
  , t = t || (()=>null);
e.phone() || (document.getElementById("main").innerHTML = 'Visit this site on your phone');
const END_HOUR = 26                       // 여기 바꿈
  , START_HOUR = 16                       // 여기 바꿈
  , EVENT_NAME = "Beyond Wonderland 2024" // 여기 바꿈
  , MAIN_BACKGROUND_PATH = "./background.jpg"
  , ALT_BACKGROUND_PATH = "./background-alt.jpg"
  , BACKGROUND_IMAGE_WIDTH = 1170      // 여기 바꿈
  , BACKGROUND_IMAGE_HEIGHT = 2532     // 여기 바꿈
  , MAP_PATH = "./map.jpg"
  , mapWidth = 400                    // 여기 바꿈
  , mapHeight = 400                   // 여기 바꿈
  , FONT_SIZE_IN_PX = 24
  , FONT_FAMILIES = "-apple-system, system-ui, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Ubuntu, Arial, sans-serif"
  , m = "#333"
  , STAGE_INFO = {
    FIELD: {
        displayedText: "FIELD",
        color: "#131366"
    },
    LOT: {
        displayedText: "LOT",
        color: "#610b8c"
    },
    WALL: {
        displayedText: "WALL",
        color: "#b20c7b"
    },
    TERRACE: {
        displayedText: "TERRACE",
        color: "#d98989"
    }
}
  , g = "#fff"     // 흰색?
  , f = "#fff"     // 흰색
  , u = null
  , p = "#252427"  // 보라색
  , SET_TIMES_DATA = {
    Friday: {
        LOT: {
            "CIARA B": {
                start: "15:00",
                end: "15:30"
            },
            ANNA: {
                start: "23:00",
                end: "24:30"
            },
            "CLAUDE VONSTROKE": {
                start: "17:45",
                end: "19:00"
            },
            DISFREQ: {
                start: "15:30",
                end: "16:30"
            },
            "FRANKY WAH": {
                start: "20:15",
                end: "21:30"
            },
            "JIMI JULES": {
                start: "16:30",
                end: "17:45"
            },
            "PAN-POT": {
                start: "21:30",
                end: "23:00"
            },
            "REBŪKE": {
                start: "19:00",
                end: "20:15"
            }
        },
        WALL: {
            "TA.": {
                start: "15:00",
                end: "16:00"
            },
            "8KAYS": {
                start: "18:45",
                end: "20:00"
            },
            "CHRIS AVANTGARDE": {
                start: "23:00",
                end: "24:30"
            },
            INNELLEA: {
                start: "21:30",
                end: "23:00"
            },
            "LAYLA BENITEZ": {
                start: "16:00",
                end: "17:30"
            },
            MASSANO: {
                start: "20:00",
                end: "21:30"
            },
            "SIMON DOTY": {
                start: "17:30",
                end: "18:45"
            }
        },
        TERRACE: {
            "RIVKA M": {
                start: "15:00",
                end: "16:00"
            },
            "EDDY M": {
                start: "17:15",
                end: "18:30"
            },
            "ENZO SIRAGUSA": {
                start: "23:00",
                end: "24:30"
            },
            "ROSSI.": {
                start: "18:30",
                end: "20:00"
            },
            "SIDNEY CHARLES": {
                start: "20:00",
                end: "21:30"
            },
            "TINI GESSLER": {
                start: "16:00",
                end: "17:15"
            },
            TOMAN: {
                start: "21:30",
                end: "23:00"
            }
        },
        FIELD: {
            HEMINGUEY: {
                start: "15:00",
                end: "15:45"
            },
            BISCITS: {
                start: "16:30",
                end: "17:15"
            },
            "CHRIS LORENZO": {
                start: "20:30",
                end: "21:30"
            },
            CLOONEE: {
                start: "19:30",
                end: "20:30"
            },
            "DISCO LINES": {
                start: "18:45",
                end: "19:30"
            },
            "DUKE DUMONT": {
                start: "22:30",
                end: "23:30"
            },
            "HAYDEN JAMES": {
                start: "18:00",
                end: "18:45"
            },
            SCHAK: {
                start: "15:45",
                end: "16:30"
            },
            TCHAMI: {
                start: "21:30",
                end: "22:30"
            },
            "WAX MOTIF": {
                start: "17:15",
                end: "18:00"
            },
            ZHU: {
                start: "23:30",
                end: "24:30"
            }
        }
    },
    Saturday: {
        LOT: {
            "ENTER NAME": {
                start: "13:00",
                end: "13:15"
            },
            "ANN CLUE": {
                start: "14:00",
                end: "15:00"
            },
            AZZECCA: {
                start: "15:00",
                end: "16:00"
            },
            CAMELPHAT: {
                start: "18:00",
                end: "19:15"
            },
            CLAPTONE: {
                start: "17:00",
                end: "18:00"
            },
            "MACEO PLEX": {
                start: "20:30",
                end: "22:00"
            },
            "MISS MONIQUE": {
                start: "16:00",
                end: "17:00"
            },
            "MORITZ HOFBAUER": {
                start: "13:15",
                end: "14:00"
            },
            TESTPILOT: {
                start: "19:15",
                end: "20:30"
            }
        },
        WALL: {
            MORRISKODE: {
                start: "13:00",
                end: "13:30"
            },
            "CHARLES D": {
                start: "13:30",
                end: "14:15"
            },
            "ELI & FUR": {
                start: "19:30",
                end: "20:45"
            },
            EMBRZ: {
                start: "14:15",
                end: "15:00"
            },
            "GIOLÌ & ASSIA": {
                start: "18:15",
                end: "19:30"
            },
            JERRO: {
                start: "15:00",
                end: "16:00"
            },
            "LE YOUTH": {
                start: "16:00",
                end: "17:00"
            },
            "NORA EN PURE": {
                start: "20:45",
                end: "22:00"
            },
            "SULTAN + SHEPARD": {
                start: "17:00",
                end: "18:15"
            }
        },
        TERRACE: {
            WE: {
                start: "13:00",
                end: "14:00"
            },
            "AC SLATER": {
                start: "20:30",
                end: "22:00"
            },
            ARDALAN: {
                start: "16:15",
                end: "17:30"
            },
            CID: {
                start: "17:30",
                end: "19:00"
            },
            "SWAYLÓ": {
                start: "14:00",
                end: "15:00"
            },
            TOBEHONEST: {
                start: "15:00",
                end: "16:15"
            },
            "WALKER & ROYCE": {
                start: "19:00",
                end: "20:30"
            }
        },
        FIELD: {
            "BOYS DON'T DISCO": {
                start: "13:30",
                end: "14:15"
            },
            "JANUARY BLACK": {
                start: "13:00",
                end: "13:30"
            },
            AHADADREAM: {
                start: "14:15",
                end: "15:00"
            },
            "BORIS BREJCHA": {
                start: "19:30",
                end: "20:45"
            },
            "CHRIS LAKE": {
                start: "20:45",
                end: "22:00"
            },
            DIPLO: {
                start: "18:30",
                end: "19:30"
            },
            "GORGON CITY": {
                start: "17:30",
                end: "18:30"
            },
            HUGEL: {
                start: "15:00",
                end: "15:45"
            },
            "KYLE WATSON": {
                start: "15:45",
                end: "16:30"
            },
            "SONNY FODERA": {
                start: "16:30",
                end: "17:30"
            }
        }
    }
}
  , TIME_BLOCK_MINUTES = 15
  , SITE_PATH = "https://akrso00.github.io/beyond24.github.io/"
  , SUNSET_HOUR = 7
  , SUNSET_MINUTES = 7;
var gridColor = "#fff";
const NON_MAIN_STAGES = []
  , EVENT_LENGTH = END_HOUR - 13
  , EVENT_DAYS = Object.keys(SET_TIMES_DATA)
  , TIME_BLOCKS_PER_HOUR = 4
  , STAGE_NAMES = Object.keys(STAGE_INFO)
  , STAGE_ALIASES = {}
  , STAGE_COLORS = {};
for (const t in STAGE_INFO)
    STAGE_ALIASES[t] = STAGE_INFO[t].displayedText,
    STAGE_COLORS[t] = STAGE_INFO[t].color;
let S, I;
var selectedStages, selectedDay, selectedStagesCount = 0, x = !1, USING_ALT_BACKGROUND = !1;
class Artist {
    constructor(t, e, s, n) {
        this.name = t,
        this.startTime = s,
        this.endTime = n,
        this.stage = e,
        this.stageNum = STAGE_NAMES.indexOf(e),
        this.stageColor = STAGE_COLORS[e];
        var a = s.split(":")
          , r = n.split(":");
        const l = parseInt(a[0])
          , o = parseInt(r[0]);
        l < 12 && (a[0] = `${l + 12}`),
        o < 12 && (r[0] = `${o + 12}`),
        this.start = parseInt(a[0]) + parseInt(a[1]) / 60,
        this.end = parseInt(r[0]) + parseInt(r[1]) / 60,
        this.duration = this.end - this.start
    }
}
var selectedArtists = []
  , allArtists = [];
function getActInfo(t, e=!1) {
    var s = SET_TIMES_DATA[t];
    e || NON_MAIN_STAGES.forEach((t=>{
        delete s[t];
        const e = STAGE_NAMES.indexOf(t);
        e > -1 && STAGE_NAMES.splice(e, 1)
    }
    ));
    const n = Object.keys(s);
    selectedStages = n,
    selectedStagesCount = n.length;
    for (var a = 0; a < n.length; a++) {
        const t = s[n[a]]
          , e = Object.keys(t);
        for (var r = 0; r < e.length; r++)
            allArtists.push(new Artist(e[r],n[a],t[e[r]].start,t[e[r]].end))
    }
}
function full(t) {
    gtag("event", "choose_full", {
        event_category: EVENT_NAME,
        event_label: t
    }),
    document.getElementById("loading").style.display = "block",
    document.getElementById("daySelect").style.display = "none",
    getActInfo(t),
    selectedArtists = allArtists,
    x = !0,
    V(t)
}
var _, mapImage = new Image, backgroundImage = new Image, P = new Image, sunsetImage = new Image;
function V(t) {
    gtag("event", "create_wallpaper", {
        event_category: EVENT_NAME
    }),
    document.getElementById("loading").style.display = "block",
    document.getElementById("alt")?.checked && (USING_ALT_BACKGROUND = !0,
    gridColor = "#fff"),
    selectedDay = t,
    document.getElementById("customizer").style.display = "none",
    backgroundImage.onload = function() {
        loadMapImage()
    }
    ,
    backgroundImage.src = USING_ALT_BACKGROUND ? ALT_BACKGROUND_PATH : MAIN_BACKGROUND_PATH
}
function loadMapImage() {
    mapImage.onload = function() {
        loadSunsetImage()
    }
    ,
    mapImage.src = MAP_PATH
}
function loadSunsetImage() {
    sunsetImage.onload = function() {
        F()
    }
    ,
    sunsetImage.src = "./sunset.png"
}
function F() {
    J()
}
function J() {
    var t = END_HOUR
      , e = 0;
    const s = [];
    for (var n = 0; n < selectedArtists.length; n++)
        selectedArtists[n].start < t && (t = Math.floor(selectedArtists[n].start)),
        selectedArtists[n].end > e && (e = Math.ceil(selectedArtists[n].end)),
        s.push(selectedArtists[n].stageNum);
    const a = e - t
      , r = new Array(TIME_BLOCKS_PER_HOUR * a);
    for (selectedStagesCount = [...new Set(s)].length,
    n = r.length - 1; n >= 0; n--)
        r[n] = new Array(selectedStagesCount),
        r[n].fill(null);
    for (let e = 0; e < selectedArtists.length; e++) {
        const s = Math.round(TIME_BLOCKS_PER_HOUR * (selectedArtists[e].start - t))
          , n = Math.round(TIME_BLOCKS_PER_HOUR * (selectedArtists[e].end - t));
        for (var l = r[s].indexOf(null); l < selectedStagesCount; l++) {
            for (var o = !1, i = s; i < n; i++)
                if (null !== r[i][l]) {
                    o = !0;
                    break
                }
            if (!o) {
                selectedArtists[e].column = l;
                break
            }
        }
        const {column: a, name: d} = selectedArtists[e];
        for (i = s; i < n; i++)
            r[i][a] = d
    }
    var d = x ? selectedStages.length : Math.max(...r.map((t=>t.filter((t=>null !== t)).length)))
      , A = window.devicePixelRatio || 1;
    const c = I || screen.width * A
      , E = S || screen.height * A;
    var T = .27 * E
      , _ = .62 * E / a
      , h = Math.min(Math.floor(.8 * _), c / 10)
      , N = h / 2
      , u = (c - h - 1) / d;
    document.getElementById("out"),
    document.getElementById("outContainer").className += " loaded";
    var O = document.getElementById("canvas")
      , R = O.getContext("2d");
    O.setAttribute("width", c),
    O.setAttribute("height", E),
    R.fillStyle = m,
    R.fillRect(0, 0, c, E);
    let M, C, L = 0, y = 0;
    E / c > BACKGROUND_IMAGE_HEIGHT / BACKGROUND_IMAGE_WIDTH ? (M = E,
    L = -((C = E / BACKGROUND_IMAGE_HEIGHT * BACKGROUND_IMAGE_WIDTH) - c) / 2) : (C = c,
    y = -((M = c / BACKGROUND_IMAGE_WIDTH * BACKGROUND_IMAGE_HEIGHT) - E) / 2),
    R.drawImage(backgroundImage, L, y, C, M),
    R.lineWidth = 2,
    R.textBaseline = "middle",
    R.textAlign = "center",
    R.fillStyle = gridColor,
    R.strokeStyle = gridColor;
    var G = Math.floor(1.25 * h) / 2;
    for (R.font = G + "px " + FONT_FAMILIES,
    n = t; n <= Math.ceil(e); n++) {
        var D = T + _ * (e - n);
        R.beginPath(),
        R.moveTo(h - 8, D),
        R.lineTo(c, D),
        R.stroke(),
        R.beginPath(),
        R.moveTo(0, D),
        R.lineTo(8, D),
        R.stroke();
        var v = n % 12;
        if (0 === v && (v = 12),
        R.fillText(v, N, D),
        v === SUNSET_HOUR) {
            const t = SUNSET_MINUTES / 60
              , e = .6 * h
              , s = e / (78 / 54)
              , n = (h - e) / 2;
            R.globalAlpha = USING_ALT_BACKGROUND ? .5 : .25,
            R.drawImage(sunsetImage, n, D - _ * t - s / 2, e, e / (78 / 54)),
            R.globalAlpha = 1,
            R.setLineDash([3, 6]),
            R.beginPath(),
            R.moveTo(h - 8, D - _ * t),
            R.lineTo(c, D - _ * t),
            R.stroke(),
            R.setLineDash([])
        }
    }
    R.lineWidth = 2,
    R.strokeStyle = gridColor;
    const U = t=>{
        const e = t.split(":");
        var s = parseInt(e[0]) % 12;
        return 0 === s && (s = 12),
        `${s}${"00" == e[1] ? "" : `:${e[1]}`}`
    }
      , H = Math.floor(Math.min(u / 7, G));
    for (n = 0; n < selectedArtists.length; n++) {
        R.fillStyle = selectedArtists[n].stageColor;
        var B = selectedArtists[n].stageNum;
        x || (B = selectedArtists[n].column);
        var b = h + u * B
          , w = T + _ * (e - (selectedArtists[n].start + selectedArtists[n].duration))
          , k = _ * selectedArtists[n].duration;
        R.fillRect(b, w, u, k),
        R.strokeRect(b, w, u, k),
        R.fillStyle = "#fff";
        var F = Math.min(1.2 * u / selectedArtists[n].name.length, .5 * k, 36)
          , P = selectedArtists[n].name;
        if (F < H) {
            F = H,
            R.font = Math.min(H, k) + "px " + FONT_FAMILIES;
            const t = .8 * u / R.measureText(P).width
              , e = Math.floor(P.length * t);
            P = P.substr(0, e) + (e < P.length ? ".." : "")
        }
        var K = .1 * F;
        const t = Math.min(H, Math.floor((k - H) / 2))
          , s = k > H && t > 6;
        R.font = F + "px " + FONT_FAMILIES,
        R.textBaseline = "middle",
        R.fillText(P, b + u / 2, s ? w + k / 2 - t / 2 : w + k / 2),
        R.textBaseline = "middle",
        R.font = `500 ${t}px ${FONT_FAMILIES}`,
        R.fillStyle = "#ffffffff",
        s && R.fillText(U(selectedArtists[n].startTime) + "-" + U(selectedArtists[n].endTime), b + u / 2, w + k / 2 + K + F / 2)
    }
    for (R.strokeStyle = gridColor,
    R.globalAlpha = .2,
    n = t; n <= Math.ceil(e); n++)
        D = T + _ * (e - n),
        R.beginPath(),
        R.moveTo(h, D),
        R.lineTo(c, D),
        R.stroke();
    R.globalAlpha = 1;
    var W, Y, V = Math.max(40, .035 * E), $ = T - 2 * V, Z = $ * (mapWidth / mapHeight), j = (c - Math.max(400, c / 2)) / 2, X = j / (mapWidth / mapHeight);
    X > $ ? (W = $,
    Y = Z) : (W = X,
    Y = j);
    var J = (T - W) / 2
      , Q = c - Y - 4;
    R.drawImage(mapImage, Q, J, Y, W),
    R.textAlign = "left",
    R.textBaseline = "top",
    R.fillStyle = gridColor;
    const z = Math.round(.15 * Y);
    R.font = `900 ${z}px ${FONT_FAMILIES}`;
    var q = selectedDay.toUpperCase().split("").join("  ");
    R.fillText(q, .055 * Y, V);
    const tt = STAGE_NAMES.length
      , et = V + z + 4
      , st = (T - (et + V) - 4 * (tt - 1)) / tt
      , nt = Math.round(.15 * Y);
    R.font = `700 ${nt}px ${FONT_FAMILIES}`,
    STAGE_NAMES.forEach(((t,e)=>{
        const s = Math.min(st, 1.5 * nt)
          , n = et + e * (s + 4)
          , a = .055 * Y
          , r = R.measureText(STAGE_ALIASES[t]).width + 8 + a;
        R.fillStyle = STAGE_COLORS[t],
        R.fillRect(0, n + (st - s) / 2, r, s),
        R.fillStyle = "#fff",
        R.fillText(STAGE_ALIASES[t], a, n + (st - nt) / 2)
    }
    ));
    const at = SITE_PATH.split("").join(" ");
    R.textAlign = "center",
    R.textBaseline = "alphabetic",
    R.font = `500 ${FONT_SIZE_IN_PX}px ${FONT_FAMILIES}`;
    const rt = p;
    if (rt) {
        const t = R.measureText(`_${at}_`).width
          , e = 1.5 * FONT_SIZE_IN_PX;
        R.fillStyle = rt,
        R.fillRect((c - t) / 2, .97 * E - FONT_SIZE_IN_PX, t, e)
    }
    R.fillStyle = USING_ALT_BACKGROUND ? f : g,
    R.fillText(at, c / 2, .97 * E),
    out.src = O.toDataURL(),
    document.getElementById("overlay").className += "on",
    document.getElementById("loading").style.display = "none",
    gtag("event", "wallpaper_generated", {
        event_category: EVENT_NAME
    })
}
mapImage.crossOrigin = "anonymous",
backgroundImage.crossOrigin = "anonymous",
P.crossOrigin = "anonymous",
sunsetImage.crossOrigin = "anonymous";
const screen_height = window.innerHeight - 100
  , screen_width = window.innerWidth;
let stage_column_width = screen_width / STAGE_NAMES.length;
var Q;
function X(t) {
    Q = screen_height / EVENT_LENGTH,
    stage_column_width = screen_width / STAGE_NAMES.length
}
class ee extends React.Component {
    constructor(t) {
        super(t),
        this.state = {
            active: !1,
            index: -1
        }
    }
    handleClick() {
        this.state.active ? (selectedArtists.splice(this.state.index, 1),
        this.setState({
            index: -1
        })) : (this.setState({
            index: selectedArtists.length
        }),
        selectedArtists.push(this.props.artist),
        gtag("event", "click_artist", {
            event_category: EVENT_NAME,
            event_label: this.props.name
        })),
        this.setState({
            active: !this.state.active
        })
    }
    render() {
        return React.createElement("div", {
            className: "artistBlock",
            style: {
                opacity: this.state.active ? .3 : 1,
                top: (END_HOUR - this.props.end) * Q,
                left: this.props.stageNum * stage_column_width,
                height: Q * this.props.duration,
                width: stage_column_width,
                backgroundColor: this.props.stageColor
            },
            onClick: ()=>this.handleClick()
        }, React.createElement("p", null, this.props.name))
    }
}
class te extends React.Component {
    render() {
        return React.createElement("div", null, React.createElement("div", {
            id: "customDesc"
        }, "Click acts you want to add"), React.createElement("div", {
            style: {
                position: "relative",
                backgroundColor: "black",
                width: screen_width,
                height: screen_height
            }
        }, allArtists.map((t=>React.createElement(ee, {
            artist: t,
            name: t.name,
            end: t.end,
            stageNum: t.stageNum,
            duration: t.duration,
            stageColor: t.stageColor
        })))), React.createElement("div", {
            id: "submit",
            onClick: ()=>V(this.props.day)
        }, "Create Wallpaper"))
    }
}
function customize(t, e=!1) {
    document.getElementById("daySelect").style.display = "none",
    gtag("event", "choose_custom", {
        event_category: EVENT_NAME,
        event_label: t
    }),
    getActInfo(t, e),
    X(t),
    ReactDOM.render(React.createElement(te, {
        day: t
    }), document.getElementById("root"))
}
